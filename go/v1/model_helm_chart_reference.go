/*
Manifest Maestro

Renders Kubernetes manifests with the help of various tools such as Helm and Kustomize.

API version: v1
Contact: e.rieb@posteo.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// HelmChartReference - struct for HelmChartReference
type HelmChartReference struct {
	GitRepositoryPathReference *GitRepositoryPathReference
	HelmChartRepositoryChartReference *HelmChartRepositoryChartReference
}

// GitRepositoryPathReferenceAsHelmChartReference is a convenience function that returns GitRepositoryPathReference wrapped in HelmChartReference
func GitRepositoryPathReferenceAsHelmChartReference(v *GitRepositoryPathReference) HelmChartReference {
	return HelmChartReference{
		GitRepositoryPathReference: v,
	}
}

// HelmChartRepositoryChartReferenceAsHelmChartReference is a convenience function that returns HelmChartRepositoryChartReference wrapped in HelmChartReference
func HelmChartRepositoryChartReferenceAsHelmChartReference(v *HelmChartRepositoryChartReference) HelmChartReference {
	return HelmChartReference{
		HelmChartRepositoryChartReference: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *HelmChartReference) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GitRepositoryPathReference
	err = newStrictDecoder(data).Decode(&dst.GitRepositoryPathReference)
	if err == nil {
		jsonGitRepositoryPathReference, _ := json.Marshal(dst.GitRepositoryPathReference)
		if string(jsonGitRepositoryPathReference) == "{}" { // empty struct
			dst.GitRepositoryPathReference = nil
		} else {
			if err = validator.Validate(dst.GitRepositoryPathReference); err != nil {
				dst.GitRepositoryPathReference = nil
			} else {
				match++
			}
		}
	} else {
		dst.GitRepositoryPathReference = nil
	}

	// try to unmarshal data into HelmChartRepositoryChartReference
	err = newStrictDecoder(data).Decode(&dst.HelmChartRepositoryChartReference)
	if err == nil {
		jsonHelmChartRepositoryChartReference, _ := json.Marshal(dst.HelmChartRepositoryChartReference)
		if string(jsonHelmChartRepositoryChartReference) == "{}" { // empty struct
			dst.HelmChartRepositoryChartReference = nil
		} else {
			if err = validator.Validate(dst.HelmChartRepositoryChartReference); err != nil {
				dst.HelmChartRepositoryChartReference = nil
			} else {
				match++
			}
		}
	} else {
		dst.HelmChartRepositoryChartReference = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GitRepositoryPathReference = nil
		dst.HelmChartRepositoryChartReference = nil

		return fmt.Errorf("data matches more than one schema in oneOf(HelmChartReference)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(HelmChartReference)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src HelmChartReference) MarshalJSON() ([]byte, error) {
	if src.GitRepositoryPathReference != nil {
		return json.Marshal(&src.GitRepositoryPathReference)
	}

	if src.HelmChartRepositoryChartReference != nil {
		return json.Marshal(&src.HelmChartRepositoryChartReference)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *HelmChartReference) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GitRepositoryPathReference != nil {
		return obj.GitRepositoryPathReference
	}

	if obj.HelmChartRepositoryChartReference != nil {
		return obj.HelmChartRepositoryChartReference
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj HelmChartReference) GetActualInstanceValue() (interface{}) {
	if obj.GitRepositoryPathReference != nil {
		return *obj.GitRepositoryPathReference
	}

	if obj.HelmChartRepositoryChartReference != nil {
		return *obj.HelmChartRepositoryChartReference
	}

	// all schemas are nil
	return nil
}

type NullableHelmChartReference struct {
	value *HelmChartReference
	isSet bool
}

func (v NullableHelmChartReference) Get() *HelmChartReference {
	return v.value
}

func (v *NullableHelmChartReference) Set(val *HelmChartReference) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmChartReference) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmChartReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmChartReference(val *HelmChartReference) *NullableHelmChartReference {
	return &NullableHelmChartReference{value: val, isSet: true}
}

func (v NullableHelmChartReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmChartReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


