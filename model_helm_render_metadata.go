/*
Manifest Maestro

Renders Kubernetes manifests with the help of various tools such as Helm and Kustomize.

API version: v1.2.0
Contact: e.rieb@posteo.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the HelmRenderMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmRenderMetadata{}

// HelmRenderMetadata struct for HelmRenderMetadata
type HelmRenderMetadata struct {
	ReleaseName string `json:"releaseName"`
	Namespace string `json:"namespace"`
	ApiVersions []string `json:"apiVersions"`
	KubeVersion string `json:"kubeVersion"`
	HelmVersion string `json:"helmVersion"`
	MergedValues map[string]interface{} `json:"mergedValues"`
	AdditionalProperties map[string]interface{}
}

type _HelmRenderMetadata HelmRenderMetadata

// NewHelmRenderMetadata instantiates a new HelmRenderMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmRenderMetadata(releaseName string, namespace string, apiVersions []string, kubeVersion string, helmVersion string, mergedValues map[string]interface{}) *HelmRenderMetadata {
	this := HelmRenderMetadata{}
	this.ReleaseName = releaseName
	this.Namespace = namespace
	this.ApiVersions = apiVersions
	this.KubeVersion = kubeVersion
	this.HelmVersion = helmVersion
	this.MergedValues = mergedValues
	return &this
}

// NewHelmRenderMetadataWithDefaults instantiates a new HelmRenderMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmRenderMetadataWithDefaults() *HelmRenderMetadata {
	this := HelmRenderMetadata{}
	return &this
}

// GetReleaseName returns the ReleaseName field value
func (o *HelmRenderMetadata) GetReleaseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReleaseName
}

// GetReleaseNameOk returns a tuple with the ReleaseName field value
// and a boolean to check if the value has been set.
func (o *HelmRenderMetadata) GetReleaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReleaseName, true
}

// SetReleaseName sets field value
func (o *HelmRenderMetadata) SetReleaseName(v string) {
	o.ReleaseName = v
}

// GetNamespace returns the Namespace field value
func (o *HelmRenderMetadata) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *HelmRenderMetadata) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *HelmRenderMetadata) SetNamespace(v string) {
	o.Namespace = v
}

// GetApiVersions returns the ApiVersions field value
func (o *HelmRenderMetadata) GetApiVersions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ApiVersions
}

// GetApiVersionsOk returns a tuple with the ApiVersions field value
// and a boolean to check if the value has been set.
func (o *HelmRenderMetadata) GetApiVersionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApiVersions, true
}

// SetApiVersions sets field value
func (o *HelmRenderMetadata) SetApiVersions(v []string) {
	o.ApiVersions = v
}

// GetKubeVersion returns the KubeVersion field value
func (o *HelmRenderMetadata) GetKubeVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KubeVersion
}

// GetKubeVersionOk returns a tuple with the KubeVersion field value
// and a boolean to check if the value has been set.
func (o *HelmRenderMetadata) GetKubeVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KubeVersion, true
}

// SetKubeVersion sets field value
func (o *HelmRenderMetadata) SetKubeVersion(v string) {
	o.KubeVersion = v
}

// GetHelmVersion returns the HelmVersion field value
func (o *HelmRenderMetadata) GetHelmVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HelmVersion
}

// GetHelmVersionOk returns a tuple with the HelmVersion field value
// and a boolean to check if the value has been set.
func (o *HelmRenderMetadata) GetHelmVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HelmVersion, true
}

// SetHelmVersion sets field value
func (o *HelmRenderMetadata) SetHelmVersion(v string) {
	o.HelmVersion = v
}

// GetMergedValues returns the MergedValues field value
func (o *HelmRenderMetadata) GetMergedValues() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.MergedValues
}

// GetMergedValuesOk returns a tuple with the MergedValues field value
// and a boolean to check if the value has been set.
func (o *HelmRenderMetadata) GetMergedValuesOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.MergedValues, true
}

// SetMergedValues sets field value
func (o *HelmRenderMetadata) SetMergedValues(v map[string]interface{}) {
	o.MergedValues = v
}

func (o HelmRenderMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmRenderMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["releaseName"] = o.ReleaseName
	toSerialize["namespace"] = o.Namespace
	toSerialize["apiVersions"] = o.ApiVersions
	toSerialize["kubeVersion"] = o.KubeVersion
	toSerialize["helmVersion"] = o.HelmVersion
	toSerialize["mergedValues"] = o.MergedValues

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HelmRenderMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"releaseName",
		"namespace",
		"apiVersions",
		"kubeVersion",
		"helmVersion",
		"mergedValues",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHelmRenderMetadata := _HelmRenderMetadata{}

	err = json.Unmarshal(data, &varHelmRenderMetadata)

	if err != nil {
		return err
	}

	*o = HelmRenderMetadata(varHelmRenderMetadata)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "releaseName")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "apiVersions")
		delete(additionalProperties, "kubeVersion")
		delete(additionalProperties, "helmVersion")
		delete(additionalProperties, "mergedValues")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHelmRenderMetadata struct {
	value *HelmRenderMetadata
	isSet bool
}

func (v NullableHelmRenderMetadata) Get() *HelmRenderMetadata {
	return v.value
}

func (v *NullableHelmRenderMetadata) Set(val *HelmRenderMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmRenderMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmRenderMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmRenderMetadata(val *HelmRenderMetadata) *NullableHelmRenderMetadata {
	return &NullableHelmRenderMetadata{value: val, isSet: true}
}

func (v NullableHelmRenderMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmRenderMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


