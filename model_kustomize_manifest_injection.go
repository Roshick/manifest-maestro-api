/*
Manifest Maestro

Renders Kubernetes manifests with the help of various tools such as Helm and Kustomize.

API version: v1.2.0
Contact: e.rieb@posteo.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the KustomizeManifestInjection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KustomizeManifestInjection{}

// KustomizeManifestInjection struct for KustomizeManifestInjection
type KustomizeManifestInjection struct {
	FileName string `json:"fileName"`
	Manifests []Manifest `json:"manifests"`
	AdditionalProperties map[string]interface{}
}

type _KustomizeManifestInjection KustomizeManifestInjection

// NewKustomizeManifestInjection instantiates a new KustomizeManifestInjection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKustomizeManifestInjection(fileName string, manifests []Manifest) *KustomizeManifestInjection {
	this := KustomizeManifestInjection{}
	this.FileName = fileName
	this.Manifests = manifests
	return &this
}

// NewKustomizeManifestInjectionWithDefaults instantiates a new KustomizeManifestInjection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKustomizeManifestInjectionWithDefaults() *KustomizeManifestInjection {
	this := KustomizeManifestInjection{}
	return &this
}

// GetFileName returns the FileName field value
func (o *KustomizeManifestInjection) GetFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value
// and a boolean to check if the value has been set.
func (o *KustomizeManifestInjection) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileName, true
}

// SetFileName sets field value
func (o *KustomizeManifestInjection) SetFileName(v string) {
	o.FileName = v
}

// GetManifests returns the Manifests field value
func (o *KustomizeManifestInjection) GetManifests() []Manifest {
	if o == nil {
		var ret []Manifest
		return ret
	}

	return o.Manifests
}

// GetManifestsOk returns a tuple with the Manifests field value
// and a boolean to check if the value has been set.
func (o *KustomizeManifestInjection) GetManifestsOk() ([]Manifest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Manifests, true
}

// SetManifests sets field value
func (o *KustomizeManifestInjection) SetManifests(v []Manifest) {
	o.Manifests = v
}

func (o KustomizeManifestInjection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KustomizeManifestInjection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fileName"] = o.FileName
	toSerialize["manifests"] = o.Manifests

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KustomizeManifestInjection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fileName",
		"manifests",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKustomizeManifestInjection := _KustomizeManifestInjection{}

	err = json.Unmarshal(data, &varKustomizeManifestInjection)

	if err != nil {
		return err
	}

	*o = KustomizeManifestInjection(varKustomizeManifestInjection)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "fileName")
		delete(additionalProperties, "manifests")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKustomizeManifestInjection struct {
	value *KustomizeManifestInjection
	isSet bool
}

func (v NullableKustomizeManifestInjection) Get() *KustomizeManifestInjection {
	return v.value
}

func (v *NullableKustomizeManifestInjection) Set(val *KustomizeManifestInjection) {
	v.value = val
	v.isSet = true
}

func (v NullableKustomizeManifestInjection) IsSet() bool {
	return v.isSet
}

func (v *NullableKustomizeManifestInjection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKustomizeManifestInjection(val *KustomizeManifestInjection) *NullableKustomizeManifestInjection {
	return &NullableKustomizeManifestInjection{value: val, isSet: true}
}

func (v NullableKustomizeManifestInjection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKustomizeManifestInjection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


