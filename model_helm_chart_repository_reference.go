/*
Manifest Maestro

Renders Kubernetes manifests with the help of various tools such as Helm and Kustomize.

API version: v1.2.0
Contact: e.rieb@posteo.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the HelmChartRepositoryReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmChartRepositoryReference{}

// HelmChartRepositoryReference struct for HelmChartRepositoryReference
type HelmChartRepositoryReference struct {
	RepositoryURL string `json:"repositoryURL"`
	AdditionalProperties map[string]interface{}
}

type _HelmChartRepositoryReference HelmChartRepositoryReference

// NewHelmChartRepositoryReference instantiates a new HelmChartRepositoryReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmChartRepositoryReference(repositoryURL string) *HelmChartRepositoryReference {
	this := HelmChartRepositoryReference{}
	this.RepositoryURL = repositoryURL
	return &this
}

// NewHelmChartRepositoryReferenceWithDefaults instantiates a new HelmChartRepositoryReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmChartRepositoryReferenceWithDefaults() *HelmChartRepositoryReference {
	this := HelmChartRepositoryReference{}
	return &this
}

// GetRepositoryURL returns the RepositoryURL field value
func (o *HelmChartRepositoryReference) GetRepositoryURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepositoryURL
}

// GetRepositoryURLOk returns a tuple with the RepositoryURL field value
// and a boolean to check if the value has been set.
func (o *HelmChartRepositoryReference) GetRepositoryURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepositoryURL, true
}

// SetRepositoryURL sets field value
func (o *HelmChartRepositoryReference) SetRepositoryURL(v string) {
	o.RepositoryURL = v
}

func (o HelmChartRepositoryReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmChartRepositoryReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["repositoryURL"] = o.RepositoryURL

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HelmChartRepositoryReference) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"repositoryURL",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHelmChartRepositoryReference := _HelmChartRepositoryReference{}

	err = json.Unmarshal(data, &varHelmChartRepositoryReference)

	if err != nil {
		return err
	}

	*o = HelmChartRepositoryReference(varHelmChartRepositoryReference)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "repositoryURL")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHelmChartRepositoryReference struct {
	value *HelmChartRepositoryReference
	isSet bool
}

func (v NullableHelmChartRepositoryReference) Get() *HelmChartRepositoryReference {
	return v.value
}

func (v *NullableHelmChartRepositoryReference) Set(val *HelmChartRepositoryReference) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmChartRepositoryReference) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmChartRepositoryReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmChartRepositoryReference(val *HelmChartRepositoryReference) *NullableHelmChartRepositoryReference {
	return &NullableHelmChartRepositoryReference{value: val, isSet: true}
}

func (v NullableHelmChartRepositoryReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmChartRepositoryReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


