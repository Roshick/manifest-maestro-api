/*
Manifest Maestro

Renders Kubernetes manifests with the help of various tools such as Helm and Kustomize.

API version: v1.2.0
Contact: e.rieb@posteo.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the HelmRenderChartAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmRenderChartAction{}

// HelmRenderChartAction struct for HelmRenderChartAction
type HelmRenderChartAction struct {
	Reference HelmChartReference `json:"reference"`
	Parameters *HelmRenderParameters `json:"parameters,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HelmRenderChartAction HelmRenderChartAction

// NewHelmRenderChartAction instantiates a new HelmRenderChartAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmRenderChartAction(reference HelmChartReference) *HelmRenderChartAction {
	this := HelmRenderChartAction{}
	this.Reference = reference
	return &this
}

// NewHelmRenderChartActionWithDefaults instantiates a new HelmRenderChartAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmRenderChartActionWithDefaults() *HelmRenderChartAction {
	this := HelmRenderChartAction{}
	return &this
}

// GetReference returns the Reference field value
func (o *HelmRenderChartAction) GetReference() HelmChartReference {
	if o == nil {
		var ret HelmChartReference
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *HelmRenderChartAction) GetReferenceOk() (*HelmChartReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *HelmRenderChartAction) SetReference(v HelmChartReference) {
	o.Reference = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *HelmRenderChartAction) GetParameters() HelmRenderParameters {
	if o == nil || IsNil(o.Parameters) {
		var ret HelmRenderParameters
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRenderChartAction) GetParametersOk() (*HelmRenderParameters, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *HelmRenderChartAction) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given HelmRenderParameters and assigns it to the Parameters field.
func (o *HelmRenderChartAction) SetParameters(v HelmRenderParameters) {
	o.Parameters = &v
}

func (o HelmRenderChartAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmRenderChartAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reference"] = o.Reference
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HelmRenderChartAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reference",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHelmRenderChartAction := _HelmRenderChartAction{}

	err = json.Unmarshal(data, &varHelmRenderChartAction)

	if err != nil {
		return err
	}

	*o = HelmRenderChartAction(varHelmRenderChartAction)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "reference")
		delete(additionalProperties, "parameters")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHelmRenderChartAction struct {
	value *HelmRenderChartAction
	isSet bool
}

func (v NullableHelmRenderChartAction) Get() *HelmRenderChartAction {
	return v.value
}

func (v *NullableHelmRenderChartAction) Set(val *HelmRenderChartAction) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmRenderChartAction) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmRenderChartAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmRenderChartAction(val *HelmRenderChartAction) *NullableHelmRenderChartAction {
	return &NullableHelmRenderChartAction{value: val, isSet: true}
}

func (v NullableHelmRenderChartAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmRenderChartAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


