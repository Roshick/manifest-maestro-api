/*
Manifest Maestro

Renders Kubernetes manifests with the help of various tools such as Helm and Kustomize.

API version: v1.2.0
Contact: e.rieb@posteo.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the GitRepositoryPathReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitRepositoryPathReference{}

// GitRepositoryPathReference struct for GitRepositoryPathReference
type GitRepositoryPathReference struct {
	RepositoryURL string `json:"repositoryURL"`
	Reference string `json:"reference"`
	Path *string `json:"path,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GitRepositoryPathReference GitRepositoryPathReference

// NewGitRepositoryPathReference instantiates a new GitRepositoryPathReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitRepositoryPathReference(repositoryURL string, reference string) *GitRepositoryPathReference {
	this := GitRepositoryPathReference{}
	this.RepositoryURL = repositoryURL
	this.Reference = reference
	return &this
}

// NewGitRepositoryPathReferenceWithDefaults instantiates a new GitRepositoryPathReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitRepositoryPathReferenceWithDefaults() *GitRepositoryPathReference {
	this := GitRepositoryPathReference{}
	return &this
}

// GetRepositoryURL returns the RepositoryURL field value
func (o *GitRepositoryPathReference) GetRepositoryURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepositoryURL
}

// GetRepositoryURLOk returns a tuple with the RepositoryURL field value
// and a boolean to check if the value has been set.
func (o *GitRepositoryPathReference) GetRepositoryURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepositoryURL, true
}

// SetRepositoryURL sets field value
func (o *GitRepositoryPathReference) SetRepositoryURL(v string) {
	o.RepositoryURL = v
}

// GetReference returns the Reference field value
func (o *GitRepositoryPathReference) GetReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *GitRepositoryPathReference) GetReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *GitRepositoryPathReference) SetReference(v string) {
	o.Reference = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *GitRepositoryPathReference) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitRepositoryPathReference) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *GitRepositoryPathReference) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *GitRepositoryPathReference) SetPath(v string) {
	o.Path = &v
}

func (o GitRepositoryPathReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitRepositoryPathReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["repositoryURL"] = o.RepositoryURL
	toSerialize["reference"] = o.Reference
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GitRepositoryPathReference) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"repositoryURL",
		"reference",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGitRepositoryPathReference := _GitRepositoryPathReference{}

	err = json.Unmarshal(data, &varGitRepositoryPathReference)

	if err != nil {
		return err
	}

	*o = GitRepositoryPathReference(varGitRepositoryPathReference)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "repositoryURL")
		delete(additionalProperties, "reference")
		delete(additionalProperties, "path")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGitRepositoryPathReference struct {
	value *GitRepositoryPathReference
	isSet bool
}

func (v NullableGitRepositoryPathReference) Get() *GitRepositoryPathReference {
	return v.value
}

func (v *NullableGitRepositoryPathReference) Set(val *GitRepositoryPathReference) {
	v.value = val
	v.isSet = true
}

func (v NullableGitRepositoryPathReference) IsSet() bool {
	return v.isSet
}

func (v *NullableGitRepositoryPathReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitRepositoryPathReference(val *GitRepositoryPathReference) *NullableGitRepositoryPathReference {
	return &NullableGitRepositoryPathReference{value: val, isSet: true}
}

func (v NullableGitRepositoryPathReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitRepositoryPathReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


