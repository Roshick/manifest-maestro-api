/*
Manifest Maestro

Renders Kubernetes manifests with the help of various tools such as Helm and Kustomize.

API version: v1
Contact: e.rieb@posteo.de
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HelmRenderParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmRenderParameters{}

// HelmRenderParameters struct for HelmRenderParameters
type HelmRenderParameters struct {
	ReleaseName *string `json:"releaseName,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	KubeVersion *string `json:"kubeVersion,omitempty"`
	ApiVersions []string `json:"apiVersions,omitempty"`
	ValueFiles []string `json:"valueFiles,omitempty"`
	Values *map[string]string `json:"values,omitempty"`
	ValuesFlat []string `json:"valuesFlat,omitempty"`
	StringValues *map[string]string `json:"stringValues,omitempty"`
	StringValuesFlat []string `json:"stringValuesFlat,omitempty"`
	ComplexValues map[string]interface{} `json:"complexValues,omitempty"`
	IncludeCRDs *bool `json:"includeCRDs,omitempty"`
	IncludeHooks *bool `json:"includeHooks,omitempty"`
	IgnoreMissingValueFiles *bool `json:"ignoreMissingValueFiles,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HelmRenderParameters HelmRenderParameters

// NewHelmRenderParameters instantiates a new HelmRenderParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmRenderParameters() *HelmRenderParameters {
	this := HelmRenderParameters{}
	var includeCRDs bool = true
	this.IncludeCRDs = &includeCRDs
	var includeHooks bool = true
	this.IncludeHooks = &includeHooks
	var ignoreMissingValueFiles bool = false
	this.IgnoreMissingValueFiles = &ignoreMissingValueFiles
	return &this
}

// NewHelmRenderParametersWithDefaults instantiates a new HelmRenderParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmRenderParametersWithDefaults() *HelmRenderParameters {
	this := HelmRenderParameters{}
	var includeCRDs bool = true
	this.IncludeCRDs = &includeCRDs
	var includeHooks bool = true
	this.IncludeHooks = &includeHooks
	var ignoreMissingValueFiles bool = false
	this.IgnoreMissingValueFiles = &ignoreMissingValueFiles
	return &this
}

// GetReleaseName returns the ReleaseName field value if set, zero value otherwise.
func (o *HelmRenderParameters) GetReleaseName() string {
	if o == nil || IsNil(o.ReleaseName) {
		var ret string
		return ret
	}
	return *o.ReleaseName
}

// GetReleaseNameOk returns a tuple with the ReleaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRenderParameters) GetReleaseNameOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseName) {
		return nil, false
	}
	return o.ReleaseName, true
}

// HasReleaseName returns a boolean if a field has been set.
func (o *HelmRenderParameters) HasReleaseName() bool {
	if o != nil && !IsNil(o.ReleaseName) {
		return true
	}

	return false
}

// SetReleaseName gets a reference to the given string and assigns it to the ReleaseName field.
func (o *HelmRenderParameters) SetReleaseName(v string) {
	o.ReleaseName = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *HelmRenderParameters) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRenderParameters) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *HelmRenderParameters) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *HelmRenderParameters) SetNamespace(v string) {
	o.Namespace = &v
}

// GetKubeVersion returns the KubeVersion field value if set, zero value otherwise.
func (o *HelmRenderParameters) GetKubeVersion() string {
	if o == nil || IsNil(o.KubeVersion) {
		var ret string
		return ret
	}
	return *o.KubeVersion
}

// GetKubeVersionOk returns a tuple with the KubeVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRenderParameters) GetKubeVersionOk() (*string, bool) {
	if o == nil || IsNil(o.KubeVersion) {
		return nil, false
	}
	return o.KubeVersion, true
}

// HasKubeVersion returns a boolean if a field has been set.
func (o *HelmRenderParameters) HasKubeVersion() bool {
	if o != nil && !IsNil(o.KubeVersion) {
		return true
	}

	return false
}

// SetKubeVersion gets a reference to the given string and assigns it to the KubeVersion field.
func (o *HelmRenderParameters) SetKubeVersion(v string) {
	o.KubeVersion = &v
}

// GetApiVersions returns the ApiVersions field value if set, zero value otherwise.
func (o *HelmRenderParameters) GetApiVersions() []string {
	if o == nil || IsNil(o.ApiVersions) {
		var ret []string
		return ret
	}
	return o.ApiVersions
}

// GetApiVersionsOk returns a tuple with the ApiVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRenderParameters) GetApiVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.ApiVersions) {
		return nil, false
	}
	return o.ApiVersions, true
}

// HasApiVersions returns a boolean if a field has been set.
func (o *HelmRenderParameters) HasApiVersions() bool {
	if o != nil && !IsNil(o.ApiVersions) {
		return true
	}

	return false
}

// SetApiVersions gets a reference to the given []string and assigns it to the ApiVersions field.
func (o *HelmRenderParameters) SetApiVersions(v []string) {
	o.ApiVersions = v
}

// GetValueFiles returns the ValueFiles field value if set, zero value otherwise.
func (o *HelmRenderParameters) GetValueFiles() []string {
	if o == nil || IsNil(o.ValueFiles) {
		var ret []string
		return ret
	}
	return o.ValueFiles
}

// GetValueFilesOk returns a tuple with the ValueFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRenderParameters) GetValueFilesOk() ([]string, bool) {
	if o == nil || IsNil(o.ValueFiles) {
		return nil, false
	}
	return o.ValueFiles, true
}

// HasValueFiles returns a boolean if a field has been set.
func (o *HelmRenderParameters) HasValueFiles() bool {
	if o != nil && !IsNil(o.ValueFiles) {
		return true
	}

	return false
}

// SetValueFiles gets a reference to the given []string and assigns it to the ValueFiles field.
func (o *HelmRenderParameters) SetValueFiles(v []string) {
	o.ValueFiles = v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *HelmRenderParameters) GetValues() map[string]string {
	if o == nil || IsNil(o.Values) {
		var ret map[string]string
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRenderParameters) GetValuesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *HelmRenderParameters) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given map[string]string and assigns it to the Values field.
func (o *HelmRenderParameters) SetValues(v map[string]string) {
	o.Values = &v
}

// GetValuesFlat returns the ValuesFlat field value if set, zero value otherwise.
func (o *HelmRenderParameters) GetValuesFlat() []string {
	if o == nil || IsNil(o.ValuesFlat) {
		var ret []string
		return ret
	}
	return o.ValuesFlat
}

// GetValuesFlatOk returns a tuple with the ValuesFlat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRenderParameters) GetValuesFlatOk() ([]string, bool) {
	if o == nil || IsNil(o.ValuesFlat) {
		return nil, false
	}
	return o.ValuesFlat, true
}

// HasValuesFlat returns a boolean if a field has been set.
func (o *HelmRenderParameters) HasValuesFlat() bool {
	if o != nil && !IsNil(o.ValuesFlat) {
		return true
	}

	return false
}

// SetValuesFlat gets a reference to the given []string and assigns it to the ValuesFlat field.
func (o *HelmRenderParameters) SetValuesFlat(v []string) {
	o.ValuesFlat = v
}

// GetStringValues returns the StringValues field value if set, zero value otherwise.
func (o *HelmRenderParameters) GetStringValues() map[string]string {
	if o == nil || IsNil(o.StringValues) {
		var ret map[string]string
		return ret
	}
	return *o.StringValues
}

// GetStringValuesOk returns a tuple with the StringValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRenderParameters) GetStringValuesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.StringValues) {
		return nil, false
	}
	return o.StringValues, true
}

// HasStringValues returns a boolean if a field has been set.
func (o *HelmRenderParameters) HasStringValues() bool {
	if o != nil && !IsNil(o.StringValues) {
		return true
	}

	return false
}

// SetStringValues gets a reference to the given map[string]string and assigns it to the StringValues field.
func (o *HelmRenderParameters) SetStringValues(v map[string]string) {
	o.StringValues = &v
}

// GetStringValuesFlat returns the StringValuesFlat field value if set, zero value otherwise.
func (o *HelmRenderParameters) GetStringValuesFlat() []string {
	if o == nil || IsNil(o.StringValuesFlat) {
		var ret []string
		return ret
	}
	return o.StringValuesFlat
}

// GetStringValuesFlatOk returns a tuple with the StringValuesFlat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRenderParameters) GetStringValuesFlatOk() ([]string, bool) {
	if o == nil || IsNil(o.StringValuesFlat) {
		return nil, false
	}
	return o.StringValuesFlat, true
}

// HasStringValuesFlat returns a boolean if a field has been set.
func (o *HelmRenderParameters) HasStringValuesFlat() bool {
	if o != nil && !IsNil(o.StringValuesFlat) {
		return true
	}

	return false
}

// SetStringValuesFlat gets a reference to the given []string and assigns it to the StringValuesFlat field.
func (o *HelmRenderParameters) SetStringValuesFlat(v []string) {
	o.StringValuesFlat = v
}

// GetComplexValues returns the ComplexValues field value if set, zero value otherwise.
func (o *HelmRenderParameters) GetComplexValues() map[string]interface{} {
	if o == nil || IsNil(o.ComplexValues) {
		var ret map[string]interface{}
		return ret
	}
	return o.ComplexValues
}

// GetComplexValuesOk returns a tuple with the ComplexValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRenderParameters) GetComplexValuesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ComplexValues) {
		return map[string]interface{}{}, false
	}
	return o.ComplexValues, true
}

// HasComplexValues returns a boolean if a field has been set.
func (o *HelmRenderParameters) HasComplexValues() bool {
	if o != nil && !IsNil(o.ComplexValues) {
		return true
	}

	return false
}

// SetComplexValues gets a reference to the given map[string]interface{} and assigns it to the ComplexValues field.
func (o *HelmRenderParameters) SetComplexValues(v map[string]interface{}) {
	o.ComplexValues = v
}

// GetIncludeCRDs returns the IncludeCRDs field value if set, zero value otherwise.
func (o *HelmRenderParameters) GetIncludeCRDs() bool {
	if o == nil || IsNil(o.IncludeCRDs) {
		var ret bool
		return ret
	}
	return *o.IncludeCRDs
}

// GetIncludeCRDsOk returns a tuple with the IncludeCRDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRenderParameters) GetIncludeCRDsOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeCRDs) {
		return nil, false
	}
	return o.IncludeCRDs, true
}

// HasIncludeCRDs returns a boolean if a field has been set.
func (o *HelmRenderParameters) HasIncludeCRDs() bool {
	if o != nil && !IsNil(o.IncludeCRDs) {
		return true
	}

	return false
}

// SetIncludeCRDs gets a reference to the given bool and assigns it to the IncludeCRDs field.
func (o *HelmRenderParameters) SetIncludeCRDs(v bool) {
	o.IncludeCRDs = &v
}

// GetIncludeHooks returns the IncludeHooks field value if set, zero value otherwise.
func (o *HelmRenderParameters) GetIncludeHooks() bool {
	if o == nil || IsNil(o.IncludeHooks) {
		var ret bool
		return ret
	}
	return *o.IncludeHooks
}

// GetIncludeHooksOk returns a tuple with the IncludeHooks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRenderParameters) GetIncludeHooksOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeHooks) {
		return nil, false
	}
	return o.IncludeHooks, true
}

// HasIncludeHooks returns a boolean if a field has been set.
func (o *HelmRenderParameters) HasIncludeHooks() bool {
	if o != nil && !IsNil(o.IncludeHooks) {
		return true
	}

	return false
}

// SetIncludeHooks gets a reference to the given bool and assigns it to the IncludeHooks field.
func (o *HelmRenderParameters) SetIncludeHooks(v bool) {
	o.IncludeHooks = &v
}

// GetIgnoreMissingValueFiles returns the IgnoreMissingValueFiles field value if set, zero value otherwise.
func (o *HelmRenderParameters) GetIgnoreMissingValueFiles() bool {
	if o == nil || IsNil(o.IgnoreMissingValueFiles) {
		var ret bool
		return ret
	}
	return *o.IgnoreMissingValueFiles
}

// GetIgnoreMissingValueFilesOk returns a tuple with the IgnoreMissingValueFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmRenderParameters) GetIgnoreMissingValueFilesOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreMissingValueFiles) {
		return nil, false
	}
	return o.IgnoreMissingValueFiles, true
}

// HasIgnoreMissingValueFiles returns a boolean if a field has been set.
func (o *HelmRenderParameters) HasIgnoreMissingValueFiles() bool {
	if o != nil && !IsNil(o.IgnoreMissingValueFiles) {
		return true
	}

	return false
}

// SetIgnoreMissingValueFiles gets a reference to the given bool and assigns it to the IgnoreMissingValueFiles field.
func (o *HelmRenderParameters) SetIgnoreMissingValueFiles(v bool) {
	o.IgnoreMissingValueFiles = &v
}

func (o HelmRenderParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmRenderParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReleaseName) {
		toSerialize["releaseName"] = o.ReleaseName
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.KubeVersion) {
		toSerialize["kubeVersion"] = o.KubeVersion
	}
	if !IsNil(o.ApiVersions) {
		toSerialize["apiVersions"] = o.ApiVersions
	}
	if !IsNil(o.ValueFiles) {
		toSerialize["valueFiles"] = o.ValueFiles
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.ValuesFlat) {
		toSerialize["valuesFlat"] = o.ValuesFlat
	}
	if !IsNil(o.StringValues) {
		toSerialize["stringValues"] = o.StringValues
	}
	if !IsNil(o.StringValuesFlat) {
		toSerialize["stringValuesFlat"] = o.StringValuesFlat
	}
	if !IsNil(o.ComplexValues) {
		toSerialize["complexValues"] = o.ComplexValues
	}
	if !IsNil(o.IncludeCRDs) {
		toSerialize["includeCRDs"] = o.IncludeCRDs
	}
	if !IsNil(o.IncludeHooks) {
		toSerialize["includeHooks"] = o.IncludeHooks
	}
	if !IsNil(o.IgnoreMissingValueFiles) {
		toSerialize["ignoreMissingValueFiles"] = o.IgnoreMissingValueFiles
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HelmRenderParameters) UnmarshalJSON(data []byte) (err error) {
	varHelmRenderParameters := _HelmRenderParameters{}

	err = json.Unmarshal(data, &varHelmRenderParameters)

	if err != nil {
		return err
	}

	*o = HelmRenderParameters(varHelmRenderParameters)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "releaseName")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "kubeVersion")
		delete(additionalProperties, "apiVersions")
		delete(additionalProperties, "valueFiles")
		delete(additionalProperties, "values")
		delete(additionalProperties, "valuesFlat")
		delete(additionalProperties, "stringValues")
		delete(additionalProperties, "stringValuesFlat")
		delete(additionalProperties, "complexValues")
		delete(additionalProperties, "includeCRDs")
		delete(additionalProperties, "includeHooks")
		delete(additionalProperties, "ignoreMissingValueFiles")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHelmRenderParameters struct {
	value *HelmRenderParameters
	isSet bool
}

func (v NullableHelmRenderParameters) Get() *HelmRenderParameters {
	return v.value
}

func (v *NullableHelmRenderParameters) Set(val *HelmRenderParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmRenderParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmRenderParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmRenderParameters(val *HelmRenderParameters) *NullableHelmRenderParameters {
	return &NullableHelmRenderParameters{value: val, isSet: true}
}

func (v NullableHelmRenderParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmRenderParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


